//@version=5
indicator('IceBerg BB and EMA', overlay=true)

//=============== BB input =======//

showBB = input(true, title="Show Bollinger Bands")

BB_length_20 = input.int(20, minval=1, title='BB Length (20)')
BB_length_30 = input.int(30, minval=1, title='BB Length (30)')
BB_sdev_20 = input.float(2.0, minval=0.001, maxval=50, title='BB20 Deviations')
BB_sdev_30 = input.float(0.8, minval=0.001, maxval=50, title='BB30 Deviations')


showEMA = input(true, title="Show EMAs")

dev_20 = BB_sdev_20 * ta.stdev(close, BB_length_20)
upper_20 = ta.sma(close, BB_length_20) + dev_20
lower_20 = ta.sma(close, BB_length_20) - dev_20

dev_30 = BB_sdev_30 * ta.stdev(close, BB_length_30)
upper_30 = ta.sma(close, BB_length_30) + dev_30
lower_30 = ta.sma(close, BB_length_30) - dev_30

// Adjustable EMA periods
ema_period_1 = input.int(40, title='EMA Period 1', minval=1)
ema_period_2 = input.int(60, title='EMA Period 2', minval=1)
ema_period_3 = input.int(80, title='EMA Period 3', minval=1)

// Calculate EMAs
ema_1 = ta.ema(close, ema_period_1)
ema_2 = ta.ema(close, ema_period_2)
ema_3 = ta.ema(close, ema_period_3)

// Plot Bollinger Bands
p7 = plot(showBB ? upper_20 : na, title='Upper BB 20', linewidth=1, offset=1, color=color.new(#27ae60, 0), style=plot.style_line)
p8 = plot(showBB ? lower_20 : na, title='Lower BB 20', linewidth=1, offset=1, color=color.new(#e74c3c, 0), style=plot.style_line)

p9 = plot(showBB ? upper_30 : na, title='Upper BB 30', linewidth=1, offset=1, color=color.new(#27ae60, 0), style=plot.style_line)
p10 = plot(showBB ? lower_30 : na, title='Lower BB 30', linewidth=1, offset=1, color=color.new(#e74c3c, 0), style=plot.style_line)

// Plot EMAs
p11 = plot(showEMA ? ema_1 : na, title="EMA 1", color=color.rgb(33, 149, 243, 69), linewidth=2, offset=1)
p12 = plot(showEMA ? ema_2 : na, title="EMA 2", color=color.rgb(33, 149, 243, 69), linewidth=2, offset=1)
p13 = plot(showEMA ? ema_3 : na, title="EMA 3", color=color.rgb(33, 149, 243, 69), linewidth=2, offset=1)

// Fill between Bollinger Bands
fill(p7, p9, color=color.new(color.green, 80), title="BB Fill Green")
fill(p8, p10, color=color.new(color.red, 80), title="BB Fill Red")

// Fill between EMAs
fill(p11, p13, color=color.new(#c7c8c8, 50), title="EMA Fill Grey")



// ========== ADD CCI ========//

// Input variables for CCI
cci_len = input(40, title='CCI length')
src = input(hlc3, title='CCI source')

// Calculate CCI
ccindex = ta.cci(src, cci_len)

// Input variables for MACD
fast_len = input(5, title='fast length')
slow_len = input(400, title='slow length')
sig_len = input(400, title='signal length')
topLevel = input(70, title='top level')
bottomLevel = input(-70, title='top level')

// Calculate MACD of CCI
//[macdLine, signalLine, histLine] = ta.macd(ccindex, fast_len, slow_len, sig_len)

// Set histogram color based on its value
//histColor = histLine >= 0 ? color.green : color.red

// Plot MACD Histogram with bar width 4
//barcolor(histColor, title="MACD Histogram")

// Plot a label for buy when CCI crosses below -100 (change from -50 to -100)
// buyCondition = ta.crossover(ccindex, bottomLevel)
// plotshape(buyCondition, style=shape.labelup, location=location.belowbar, size=size.tiny, color=color.green, text="", textcolor=color.green, title="Buy Label")

// Plot a label for sell when CCI crosses above 100 (change from 100 to -100)
// sellCondition = ta.crossunder(ccindex, topLevel)
// plotshape(sellCondition, style=shape.labeldown, location=location.abovebar, size=size.tiny, color=color.red, text="", textcolor=color.red, title="Sell Label")

buyTrendCondition = ta.crossover(ccindex, topLevel)
plotshape(buyTrendCondition, style=shape.labelup, location=location.belowbar, size=size.tiny, color=color.new(color.green, 0), text='Buy', textcolor=color.new(color.white, 0), title='Buy Label' )

sellTrendCondition = ta.crossunder(ccindex, bottomLevel)
plotshape(sellTrendCondition, style=shape.labeldown, location=location.abovebar, size=size.tiny, color=color.new(color.red, 0), text='Sell', textcolor=color.new(color.white, 0), title='Sell Label')

// ========== BOS INPUT ========//
smoothing = input.string(title="MA_Type", defval="HMA", options=["RMA", "SMA", "EMA", "WMA", "HMA"], group = 'GRP1')
short_ma_len = input.int(defval = 30, title = "short_ma_len", minval = 5 , maxval = 240 , step = 1 , tooltip = "短MA长度", inline = "11", group = 'GRP1')

show_short_zz = input(false, inline = "22", group='GRP2')
show_ma_cross_signal = input(false, inline = "22", group='GRP2')
zzstyle = input.string(defval='Dashed', options=['Dashed', 'Dotted', 'Solid'], group='GRP2')
show_ma_line = input(false, inline = "22", group='GRP2')



//==========BOS==============================//
// --------------- vars ---------------
var max_arr_size = 300
var short_ma_color = color.red
short_ma_color := nz(short_ma_color[1], color.red)
var line short_zzline = na

var line short_bosline = na
var label short_bos_lb = na
color label_transp = #ffffff00

var short_pivot_l_arr = array.new_float(size = max_arr_size, initial_value = 0.0) 
var short_pivot_h_arr = array.new_float(size = max_arr_size, initial_value = 0.0)
var short_lowestestbar_offset_arr = array.new_int(size = max_arr_size, initial_value = 0) 
var short_highestbar_offset_arr   = array.new_int(size = max_arr_size, initial_value = 0)

var s_bos_high_arr = array.new_bool(size = 1, initial_value = false)
var s_bos_low_arr = array.new_bool(size = 1, initial_value = false)

// --------------- vars ---------------
// --------------- Functions ---------------
add_to_zigzag(arr, value) =>
    array.unshift(arr, value)
    if array.size(arr) > max_arr_size
        array.pop(arr)

ma_function(source, length) =>
    float ma = switch smoothing
        "RMA" => nz(ta.rma(source, length), source)
        "SMA" => nz(ta.sma(source, length), source)
        "EMA" => nz(ta.ema(source, length), source)
        "HMA" => nz(ta.hma(source, length), source)
        "WMA" => nz(ta.wma(source, length), source)
        =>  nz(ta.wma(source, length), source)
    ma

is_first_break(bos_arr, i) =>
    val = array.get(id = bos_arr, index = i)
    if val == true
        false
    else
        true

// --------------- Functions ---------------
// --------------- Calculate Pivots ---------------
short_ma = ma_function(close, short_ma_len)

// -- short ma calculate
var s_ma_continue_len = 2
s_ma_continue_len := nz(s_ma_continue_len[1], 2)
int short_highestbar_offset = - ta.highestbars(high, s_ma_continue_len)
int short_lowestbar_offset = - ta.lowestbars(low, s_ma_continue_len)
float short_pivot_h = ta.highest(high, s_ma_continue_len)
float short_pivot_l = ta.lowest(low, s_ma_continue_len)

short_ma_cu = ta.crossunder(source1 = close, source2 = short_ma) 
short_ma_co = ta.crossover(source1 = close, source2 = short_ma)

bool alert_bos_high = false
bool alert_bos_low = false

if short_ma_co
    // get the lowest
    add_to_zigzag(short_pivot_l_arr, short_pivot_l)
    add_to_zigzag(short_lowestestbar_offset_arr, short_lowestbar_offset)

    short_ma_color := color.new(#0cdb6d, 10)

    barindex0 = math.round(array.get(short_lowestestbar_offset_arr, 0))
    price0 = array.get(short_pivot_l_arr, 0)
    barindex1 = math.round(array.get(short_highestbar_offset_arr, 0)) + s_ma_continue_len
    price1 = array.get(short_pivot_h_arr, 0)
    
    if show_short_zz
        short_zzline := line.new(x1 = bar_index[barindex0], y1 = price0, x2 = bar_index[barindex1], y2 = price1, color = color.red, style = line.style_solid ) 

    // Update the barindex, the following judgment BOS needs to be used
    array.set(short_highestbar_offset_arr, 0, barindex1)
    s_ma_continue_len := 1

    // Reset the low before the breakout to the initial value
    array.fill(s_bos_low_arr, false)
else if short_ma_cu
    // Get the highest
    add_to_zigzag(short_pivot_h_arr, short_pivot_h)
    add_to_zigzag(short_highestbar_offset_arr, short_highestbar_offset)

    short_ma_color := color.red
    
    price0 = array.get(short_pivot_h_arr, 0)
    barindex0 = math.round(array.get(short_highestbar_offset_arr, 0))
    price1 = array.get(short_pivot_l_arr, 0)
    barindex1 = math.round(array.get(short_lowestestbar_offset_arr, 0)) + s_ma_continue_len
    
    if show_short_zz
        short_zzline := line.new(x1 = bar_index[barindex0], y1 = price0, x2 = bar_index[barindex1], y2 = price1, color = color.red, style = line.style_solid ) 

    // barindex  
    array.set(short_lowestestbar_offset_arr, 0, barindex1)
    s_ma_continue_len := 1
    //Reset the high before the breakout to the initial value
    array.fill(s_bos_high_arr, false)
else
    s_ma_continue_len := s_ma_continue_len + 1

    // BOS
    // break High
    for i = 0 to array.size(s_bos_high_arr) - 1
        if (close[2] < array.get(short_pivot_h_arr, i) or close[1] < array.get(short_pivot_h_arr, i))  and  close > array.get(short_pivot_h_arr, i)
            // Judging whether the first breakthrough
            if is_first_break(s_bos_high_arr, i)
                // first breakthrough, assign
                array.set(s_bos_high_arr, i , value = true) 

                price0 = array.get(short_pivot_h_arr, i)
                barindex0 = 0
                for j = 0 to i
                    barindex0 += array.get(short_highestbar_offset_arr, j)
                    if j == 0
                        barindex0 += s_ma_continue_len
                    
                price1 = array.get(short_pivot_h_arr, i)
                barindex1 = 0
                
                labelText = 'L,' + str.tostring(price0) + ',' + str.tostring(barindex0) + ','  +  str.tostring(barindex1)
                //label.new(x = bar_index[barindex0], y = price0 , text = labelText,  yloc = yloc.belowbar , style=label.style_label_up, textcolor = color.white)
                
                short_bosline := line.new(x1 = bar_index[barindex0], y1 = price0, x2 = bar_index[barindex1], y2 = price1,
                 color = color.new(#0cdb6d, 10), style = line.style_solid, width=1) 
                short_bos_lb  := label.new(int(math.avg(bar_index[barindex0],bar_index[barindex1] )), price1, color = label_transp, text="SNRB",
                 textcolor = color.new(#0cdb6d, 10), size=size.small, style = label.style_label_down)
                alert_bos_high := true

    // Break Low
    for i = 0 to array.size(s_bos_low_arr) - 1
        if (close[2] > array.get(short_pivot_l_arr, i) or close[1] > array.get(short_pivot_l_arr, i))  and  close < array.get(short_pivot_l_arr, i)
            // it is the first time to break
            if is_first_break(s_bos_low_arr, i)
                // first breakthrough, assign
                array.set(s_bos_low_arr, i , value = true) 

                price0 = array.get(short_pivot_l_arr, i)
                barindex0 = 0
                for j = 0 to i
                    barindex0 += array.get(short_lowestestbar_offset_arr, j)
                    if j == 0
                        barindex0 += s_ma_continue_len
                    
                price1 = array.get(short_pivot_l_arr, i)
                barindex1 = 0
                
                labelText = 'H,' + str.tostring(price0) + ',' + str.tostring(barindex0) + ','  +  str.tostring(barindex1)
                //label.new(x = bar_index[barindex0], y = price0 , text = labelText,  yloc = yloc.abovebar , style=label.style_label_up, textcolor = color.white)
                
                short_bosline := line.new(x1 = bar_index[barindex0], y1 = price0, x2 = bar_index[barindex1], y2 = price1, color = color.red, style = line.style_solid ) 
                short_bos_lb  := label.new(int(math.avg(bar_index[barindex0],bar_index[barindex1] )), price1, color = label_transp, text="SNRB",
                 textcolor = color.red, size=size.small, style = label.style_label_up)
                alert_bos_low := true 



//==========BOS==============================//

///=========================== dailycandle ===========================//

_v = input.string("1.1.1", title="Version", options=["1.1.1"], group="Trader's life", tooltip="This is a free script to be used with EMA Strategy & SMC")
_theme = input.string(defval='Default', title='Theme', options=['Default', 'Dark', 'Light'], group="Trader's life", tooltip='Select the theme for the indicator. You must be on the \'Default\' theme to use the color settings below.')

showCurrent  = input.bool(true, title=" Show Current HTF Candle", group="Settings", tooltip="Choose whether to show the current open HTF candle, or to wait until the close")
candleOptions = input.string(defval='Candles', title='Display Options', options=['Candles', 'Bars'], group='Settings', tooltip='')


timeframe_ = input.timeframe("1D",title="HTF Candle Resolution", group="Settings", tooltip="Choose which higher timeframe you wish to display")
boxLimit = input.int(5, title="Maximum HTF Candles", group="Settings", tooltip="Choose how many HTF candles are displayed")
lineLimit = boxLimit

candleOffset  = input.bool(false, title=" Offset Recent HTF Candle", group="Settings", tooltip="This setting only works if you have the above option turned on")
boxLimit := candleOffset ? 1 : boxLimit
lineLimit := candleOffset ? 1 : lineLimit


color_bull = input.color(color.new(color.green, 85), title="Bullish Candle Color      ", group="Colors")
color_bear = input.color(color.new(color.red, 85), title="Bearish Candle Color      ", group="Colors")

widthWicks = input.int(3, title="Wick Width ", inline="1", group="Colors")
color_wicks = input.color(color.new(color.gray, 80), inline="1", title="  Color", group="Colors")

// change our color theme
if _theme == "Dark"
    color_bull := color.new(#c6c6c6,85)
    color_bear := color.new(#5d606b,85)
    color_wicks := color.new(#5d606b, 80)

if _theme == "Light"
    color_bull := color.new(#9598a1,75)
    color_bear := color.new(#1f4ef5,70)
    color_wicks := color.new(#9598a1, 70)

// Decalre our variables
var int previous_time = 0
var int mid4 = na

// Candle Arrays
var bArray = array.new_box()
var twArray = array.new_line()
var bwArray = array.new_line()

// Bar Arrays
var bbArray = array.new_line()
var oArray = array.new_line()
var cArray = array.new_line()

// Get our HTF data
barsBack = showCurrent ? 0 : 1
[HTFopen, HTFclose, HTFhigh, HTFlow, HTFtime, HTFtimeclose]  = request.security(syminfo.tickerid, timeframe_, [open[barsBack],close[barsBack],high[barsBack],low[barsBack],time[barsBack],time_close[barsBack]], barmerge.gaps_off, barmerge.lookahead_on)



// -----------------------------------------
// HTF Candlesticks
// -----------------------------------------
candleLong = HTFclose > HTFopen
BullBearColor = HTFclose >= HTFopen ? color_bull : color_bear
diff = time[1]-time[2]
// Get different y2 box vaules depending if the candle is bullish or not
boxEnd1 = candleLong ? HTFlow : HTFhigh
boxEnd2 = candleLong ? HTFhigh : HTFlow

HTFdiff = HTFtimeclose-HTFtime

pO = candleOffset and showCurrent ? HTFdiff : 0
mid4 := math.floor(((HTFtime+pO) + (HTFtimeclose+pO)) / 2)


// Create a HTF candle only at the begininng of that new HTF candle
if previous_time != HTFtime
    //
    if candleOptions == "Candles"
        array.push(twArray, line.new(mid4, HTFopen, mid4, boxEnd1, color = color_wicks, width = widthWicks, xloc=xloc.bar_time))
        array.push(bwArray, line.new(mid4, HTFclose, mid4, boxEnd2, color = color_wicks, width = widthWicks, xloc=xloc.bar_time))
        array.push(bArray, box.new(left=HTFtime+pO, top=HTFclose, right=HTFtimeclose+pO, bottom=HTFopen, bgcolor=BullBearColor, border_width=0,  xloc=xloc.bar_time))
    else
        array.push(bbArray, line.new(mid4, HTFhigh, mid4, HTFlow, color = color_wicks, width = widthWicks, xloc=xloc.bar_time))
        array.push(oArray, line.new(HTFtime+pO+diff, HTFopen, mid4, HTFopen, color = BullBearColor, width = widthWicks, xloc=xloc.bar_time))
        array.push(cArray, line.new(HTFtimeclose+pO-diff, HTFclose, mid4, HTFclose, color = BullBearColor, width = widthWicks, xloc=xloc.bar_time))
    previous_time := HTFtime


// Modify the most recent HTF candle to match the live Price Action. This will only run if the user has "Show Current HTF Candle" turned on
if showCurrent and array.size(bArray) > 0
    tw = array.get(twArray, array.size(twArray)-1)
    b = array.get(bArray, array.size(bArray)-1)
    bw = array.get(bwArray, array.size(bwArray)-1)
    box.set_top(b, HTFclose)
    box.set_bgcolor(b, BullBearColor)
    line.set_y1(tw, HTFclose>HTFopen?HTFclose:HTFopen)
    line.set_y2(tw, HTFhigh)
    line.set_y1(bw, HTFclose>HTFopen?HTFopen:HTFclose)
    line.set_y2(bw, HTFlow)

if showCurrent and array.size(bbArray) > 0
    o = array.get(oArray, array.size(oArray)-1)
    b = array.get(bbArray, array.size(bbArray)-1)
    c = array.get(cArray, array.size(cArray)-1)
    line.set_color(c,BullBearColor)
    line.set_y1(b,HTFhigh)
    line.set_y2(b,HTFlow)
    line.set_y1(c, HTFclose)
    line.set_y2(c, HTFclose)


// Clean up the boxes and lines and make sure there is only the allowed limit shown on the chart
if array.size(bArray) > boxLimit
    b = array.shift(bArray) 
    box.delete(b)
    
if array.size(twArray) > lineLimit
    l = array.shift(twArray) 
    line.delete(l)

if array.size(bwArray) > lineLimit
    l = array.shift(bwArray) 
    line.delete(l)

// Bars
if array.size(bbArray) > boxLimit
    b = array.shift(bbArray) 
    line.delete(b)
    
if array.size(oArray) > lineLimit
    l = array.shift(oArray) 
    line.delete(l)

if array.size(cArray) > lineLimit
    l = array.shift(cArray) 
    line.delete(l)
